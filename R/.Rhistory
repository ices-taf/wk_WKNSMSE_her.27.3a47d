#NSH <- NSH_2016
#NSH <- NSH_2017_newM
NSH <- NSH_2017_final_bench
xrange <- c(1963,yr-1); yrange <- cbind(0,1.4)#range(pretty(c(0,max(NSH@m,na.rm=T))))
par(oma=paroma,yaxs="i")
plot(0,0,col="white",xlim=xrange,ylim=yrange,xlab="Years",ylab="",
cex.lab=cl,cex.axis=ca,font.lab=fonts,font=fonts,las=1)
mtext(side=2,line=mtextline,text="Natural mortality (per yr)",cex=cl,font=fonts)
for(iAge in dimnames(NSH@m)$age){
lines(x=c(1963:(yr-1)),y=window(NSH@m[iAge,],1963,yr-1),col=an(iAge)+1,lwd=3,lty=1)
text(x=c(yr-1),y=window(NSH@m[iAge,],1963,yr-1)[,ac(yr-1)],labels=iAge,col=an(iAge)+1,font=fonts,adj=c(-0.5,0))
}
title(main=paste("Natural mortality"))
#savePlot(paste(outPath,"Natural mortality_2014",sep=""),type=figtype)
#savePlot(paste(outPath,"Natural mortality_2016",sep=""),type=figtype)
#savePlot(paste(outPath,"Natural mortality_2017_newM",sep=""),type=figtype)
savePlot(paste(outPath,"Natural mortality_2017_final_bench",sep=""),type=figtype)
#------------------------------------------------------
#
# Script to produce pictures for HAWG EL&I presentation
#
# By Niels Hintzen
#
# Date: 30-march-2012
#
#
# Runs with R2.13.2
#
#------------------------------------------------------
rm(list=ls())
library(FLSAM)
library(vmstools)
#- Presentation year
yr        <- 2018
#- Picture settings
cl        <- 1.5
ca        <- 1.2
fam       <- ""
fonts     <- 2
parmar    <- rep(0.4,4)
paroma    <- (c(4,4,1,1)+0.1)
mtextline <- 4
ltextcex  <- 1.2
figtype   <- "emf"
#- Path settings
#dataPath  <- "D:/Repository/ICES_HAWG/wg_HAWG/NSAS"
dataPath  <- "D:/git/wg_HAWG/NSAS/"
#outPath   <- paste("W:/IMARES/Data/ICES-WG/Haring werkgroep HAWG/",yr,"/EZ/figures/",sep="")
outPath   <- paste("D:/OneDrive/OneDrive - WageningenUR/projects/WG/HAWG2018/2018/new/EZ/figures/",sep="")
#- Load the output of the assessment
load(file.path(dataPath,"/results/NSH_HAWG2018_sf.RData"))
SSB(NSH.sam)
ssb(NSH.sam)
plot(x=c(0,0.8,1.4,2.6),
y=c(0.1,0.1,0.26,0.26),
type="l",
ylim=c(0,0.4),
lwd=2,
xlab="SSB in million tonnes",
ylab="Fbar",
cex.lab=1.3,
main="Management plan North Sea Herring")
abline(v=0.8,col="red",lwd=2,lty=2)
abline(v=0.9,col="blue",lwd=2,lty=2)
abline(v=1.4,col="darkgreen",lwd=2,lty=2)
text(0.8,0.08,labels=expression(B[lim]),col="red",cex=1.3,pos=2)
text(1.2,0.08,labels=expression(B[pa]),col="blue",cex=1.3,pos=2)
text(1.4,0.08,labels=expression(B[trigger]),col="darkgreen",cex=1.3,pos=4)
points(y=fbar(NSH[,ac(2008:2016)]), x=(ssb(NSH[,ac(2008:2016)])/1e6),pch=19)
lines(y=fbar(NSH[,ac(2008:2016)]),  x=(ssb(NSH[,ac(2008:2016)])/1e6))
text(y=fbar(NSH[,ac(2008:2016)]),   x=(ssb(NSH[,ac(2008:2016)])/1e6),labels=ac(2008:2016),pos=3,cex=0.7)
points(y=stf.table["intermediate year","Fbar 2-6","50%"],x=stf.table["intermediate year","SSB","50%"]/1e6,pch=19,col="red")
text(y=stf.table["intermediate year","Fbar 2-6","50%"],x=stf.table["intermediate year","SSB","50%"]/1e6+0.15,pch=19,col="red",labels="2017",font=2)
------------------------------------------------------
load(file.path(dataPath,"stf/ShortTermForecast multifleetmode_noWBSS.RData"))
row.names(stf.table)[2:nrow(stf.table)] <- c("Management plan",
"No change in A-fleet TAC",
"TAC -15%",
"TAC +15%",
"Fmsy",
"FmsyAR",
"fpa",
"flim",
"F2018",
"Bpa",
"Blim",
"MSYBtrigger",
"F=0")
plot(x=c(0,0.8,1.4,2.6),
y=c(0.1,0.1,0.26,0.26),
type="l",
ylim=c(0,0.4),
lwd=2,
xlab="SSB in million tonnes",
ylab="Fbar",
cex.lab=1.3,
main="Management plan North Sea Herring")
abline(v=0.8,col="red",lwd=2,lty=2)
abline(v=0.9,col="blue",lwd=2,lty=2)
abline(v=1.4,col="darkgreen",lwd=2,lty=2)
text(0.8,0.08,labels=expression(B[lim]),col="red",cex=1.3,pos=2)
text(1.2,0.08,labels=expression(B[pa]),col="blue",cex=1.3,pos=2)
text(1.4,0.08,labels=expression(B[trigger]),col="darkgreen",cex=1.3,pos=4)
points(y=fbar(NSH[,ac(2008:2016)]), x=(ssb(NSH[,ac(2008:2016)])/1e6),pch=19)
lines(y=fbar(NSH[,ac(2008:2016)]),  x=(ssb(NSH[,ac(2008:2016)])/1e6))
text(y=fbar(NSH[,ac(2008:2016)]),   x=(ssb(NSH[,ac(2008:2016)])/1e6),labels=ac(2008:2016),pos=3,cex=0.7)
points(y=stf.table["intermediate year","Fbar 2-6","50%"],x=stf.table["intermediate year","SSB","50%"]/1e6,pch=19,col="red")
text(y=stf.table["intermediate year","Fbar 2-6","50%"],x=stf.table["intermediate year","SSB","50%"]/1e6+0.15,pch=19,col="red",labels="2017",font=2)
plot(x=c(0,0.8,1.4,2.6),
y=c(0.1,0.1,0.26,0.26),
type="l",
ylim=c(0,0.4),
lwd=2,
xlab="SSB in million tonnes",
ylab="Fbar",
cex.lab=1.3,
main="Management plan North Sea Herring")
abline(v=0.8,col="red",lwd=2,lty=2)
abline(v=0.9,col="blue",lwd=2,lty=2)
abline(v=1.4,col="darkgreen",lwd=2,lty=2)
text(0.8,0.08,labels=expression(B[lim]),col="red",cex=1.3,pos=2)
text(1.2,0.08,labels=expression(B[pa]),col="blue",cex=1.3,pos=2)
text(1.4,0.08,labels=expression(B[trigger]),col="darkgreen",cex=1.3,pos=4)
points(y=fbar(NSH[,ac(2008:2017)]), x=(ssb(NSH[,ac(2008:2017)])/1e6),pch=19)
lines(y=fbar(NSH[,ac(2008:2017)]),  x=(ssb(NSH[,ac(2008:2017)])/1e6))
text(y=fbar(NSH[,ac(2008:2017)]),   x=(ssb(NSH[,ac(2008:2017)])/1e6),labels=ac(2008:2017),pos=3,cex=0.7)
points(y=stf.table["intermediate year","Fbar 2-6","50%"],x=stf.table["intermediate year","SSB","50%"]/1e6,pch=19,col="red")
text(y=stf.table["intermediate year","Fbar 2-6","50%"],x=stf.table["intermediate year","SSB","50%"]/1e6+0.15,pch=19,col="red",labels="2017",font=2)
plot(x=c(0,0.8,1.4,2.6),
y=c(0.1,0.1,0.26,0.26),
type="l",
ylim=c(0,0.4),
lwd=2,
xlab="SSB in million tonnes",
ylab="Fbar",
cex.lab=1.3,
main="Management plan North Sea Herring")
abline(v=0.8,col="red",lwd=2,lty=2)
abline(v=0.9,col="blue",lwd=2,lty=2)
abline(v=1.4,col="darkgreen",lwd=2,lty=2)
text(0.8,0.08,labels=expression(B[lim]),col="red",cex=1.3,pos=2)
text(1.2,0.08,labels=expression(B[pa]),col="blue",cex=1.3,pos=2)
text(1.4,0.08,labels=expression(B[trigger]),col="darkgreen",cex=1.3,pos=4)
points(y=fbar(NSH[,ac(2008:2017)]), x=(ssb(NSH[,ac(2008:2017)])/1e6),pch=19)
lines(y=fbar(NSH[,ac(2008:2017)]),  x=(ssb(NSH[,ac(2008:2017)])/1e6))
text(y=fbar(NSH[,ac(2008:2017)]),   x=(ssb(NSH[,ac(2008:2017)])/1e6),labels=ac(2008:2017),pos=3,cex=0.7)
points(y=stf.table["intermediate year","Fbar 2-6","50%"],x=stf.table["intermediate year","SSB","50%"]/1e6,pch=19,col="red")
text(y=stf.table["intermediate year","Fbar 2-6","50%"],x=stf.table["intermediate year","SSB","50%"]/1e6+0.15,pch=19,col="red",labels="2018",font=2)
savePlot(paste(outPath,"Management_plan",sep=""),type=figtype)
file.path(Sys.getenv("R_HOME"),"bin")
file.path(Sys.getenv("R_HOME"),"bin")
.libPaths()
install.packages("dtw")
dep.pck <- c("data.table", "ggplot2", "pbapply", "rgdal", "rgeos", "rJava", "sp", "XML")
install.packages(dep.pck, repos="http://cran.us.r-project.org", type="binary")
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
install.packages("rgdal")
install.packages("rJava")
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
.libPaths()
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
install.packages("data.table")
install.packages("rgdal")
install.packages("XML")
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
install.packages("rgdal")
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7') # for 64-bit version
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_162') # for 64-bit version
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_171') # for 64-bit versio
library(rJava)
JAVA_HOME
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.8.0_171\jre') # for 64-bit versio
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.8.0_171\\jre') # for 64-bit versio
library(rJava)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.8.0_171\\jre')
library("rJava")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jdk1.8.0_171\\jre')
library("rJava")
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
library("rJava")
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
library("rJava")
.libPaths()
library("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("XML")
install.packages("XML")
install.packages("ftp://ftp.imr.no/StoX/Download/Rstox/Rstox_1.9.tar.gz", repos=NULL)
install.packages(“TMB”)
install.packages("TMB")
install.packages("TMB")
install.packages("TMB")
install.packages("TMB")
.libpath()
libpath()
libPaths()
.libPaths()
.libPaths() = "C:/Program Files/R/R-3.4.3/library"
.libPaths("C:/Program Files/R/R-3.4.3/library")
.libPaths()
install.packages("TMB")
install.packages("TMB")
.libPaths()
.libPaths("C:/Program Files/R/R-3.4.3/library")
.libPaths()
install.packages("TMB")
install.packages("TMB")
.libPaths()
.libPaths("C:/Program Files/R/R-3.4.3/library")
.libPaths("C:/Program Files/R/R-3.5.1/library")
.libPaths()
install.packages("TMB")
library("Rtools)
library("Rtools)
library(Rtools)
library("Rtools")
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.1/library")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
.libPaths()
.libPaths(c("C:/Program Files/R/R-3.5.1/library","C:/RBuildTools/3.4"))
library(Rtools)
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.1/library")
.libPaths()
library(devtools)
find_rtools()
library(devtools)
requires(devtools)
require(devtools)
find_rtools()
library(Rtools)
install.packages("devtools")
.libPaths
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.1/library")
install.packages("devtools")
library(devtools)
find_rtools()
.libPaths
.libPaths()
.libPaths("C:/Program Files/R/R-3.4.3/library")
install.packages("devtools")
install.packages("devtools") .
install.packages("devtools")
?Rtools
install.packages("Rtools")
find_rtools()
library(Rtools)
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.1/library")
find_rtools()
install.packages("devtools")
find.package("devtools")
.libPaths()
.libPaths("C:/Program Files/R/R-3.4.3/library")
find.package("devtools")
install.packages("devtools")
install.packages("dplyr")
library(devtools)
capabilities("tcltk")
library(devtools)
install.packages("devtools")
install.packages("processx ")
install.packages("processx")
install.packages("devtools")
install.packages("processx")
install.packages("devtools")
install_github(repo="flr/FLSAM",ref="develop_V2"
)
find.package("devtools")
library(devtools)
install_github(repo="flr/FLSAM",ref="develop_V2")
install_github(repo="flr/FLSAM",ref="develop_V2")
install_github(repo="flr/FLSAM",ref="develop_V2")
remove.packages("TMB")
find.package(TMB)
find.package("TMB")
library(TMB)
.libPaths()
.libPaths("C:/Program Files/R/R-3.4.3/library")
install.packages("stockassessment")
install.packages("stockassessment")
install_github(repo="flr/FLSAM",ref="develop_V2")
.libPaths
.libPaths()
library(devtools)
install_github(repo="flr/FLSAM",ref="develop_V2")
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.1/library")
library(devtools)
install_github(repo="flr/FLSAM",ref="develop_V2")
remove.packages(Rcpp)
remove.packages("Rcpp")
install_github(repo="flr/FLSAM",ref="develop_V2")
install.packages("Rtools")
.libPaths()
.libPaths("C:/Program Files/R/R-3.4.4/library")
install.packages("devtools")
install_github(repo="flr/FLSAM",ref="develop_V2")
library(devtools)
install_github(repo="flr/FLSAM",ref="develop_V2")
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.1/library")
install.packages("knitr")
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.1/library")
install.packages("knitr")
.libPaths()
.libPaths("C:/Program Files/R/R-3.5.1/library")
data(ple4)
library(FLCore)
data(ple4)
flc <- as(ple4, "FLCatch")
?FLStock
#-------------------------------------------------------------------------------
# WKNSMSE
#
# Author: Benoit Berges
#         WMR, The Netherland
# email: benoit.berges@wur.nl
#
#  MSE of North Sea Herring
#
# Date: 2018/11/18
#
# Build for R3.5.1, 64bits
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# 1) load packages
#    setup paths
#    load functions
#-------------------------------------------------------------------------------
rm(list=ls())
library(FLSAM)
library(FLEDA)
# define path to directory
#path          <- "D:/Work/Herring MSE/NSAS/"
path              <- "D:/git/wk_WKNSMSE_her.27.3a47d/R/"
#path              <- "F:/WKNSMSE/wk_WKNSMSE_her.27.3a47d/R"
assessment_name   <- "NSAS_WKNSMSE2018"
try(setwd(path),silent=TRUE)
# paths to different subfolders
dataPath      <- file.path(".","data/")
outPath       <- file.path(".","results/")
scriptPath    <- file.path(".","side_scripts/")
functionPath  <- file.path(".","functions/")
# loading function
source(file.path(functionPath,"randBlocks.R"))
source(file.path(functionPath,"randNums.R"))
#-------------------------------------------------------------------------------
# 2) load assessment objects (single and multi fleet)
#    define MSE parameters
#    load raw M
#
# Note 1: the assessments we use is without the LAI index. The assessments that
# are ran during HAWG is using the LAI so results are slightly different. See
# 00_test_no_LAI.R for a comparison of the assessments. This is for convenience
# as the LAI is a component index and is weekly structured, therefore
# complicated to implement
#-------------------------------------------------------------------------------
#- Load single fleet and multi fleet assessment objects - using assessments without the LAI
#load(file.path(outPath,paste0(assessment_name,'_mf.Rdata')))
#load(file.path(outPath,paste0(assessment_name,'_sf.Rdata')))
load(file.path(outPath,paste0(assessment_name,'_mf_noLAI.Rdata')))
load(file.path(outPath,paste0(assessment_name,'_sf_noLAI.Rdata')))
# parameters
n.retro.years       <-  7                                       # Number of years for which to run the retrospective
nFutureyrs          <- 20
histMinYr           <- dims(NSH)$minyear
histMaxYr           <- dims(NSH)$maxyear
yearCurrent         <- histMinYr:histMaxYr # vector the years
futureMaxYr         <- histMaxYr + nFutureyrs
histPeriod          <- ac(histMinYr:histMaxYr)
projPeriod          <- ac((histMaxYr+1):futureMaxYr)
fullPeriod          <- c(histPeriod,projPeriod)
recrPeriod          <- ac(2007:2017)
selPeriod           <- ac(2007:2017)
fecYears            <- ac(2007:2017)
nits                <- 10 # number of random samples
# reading the raw M and applying plus group
raw_M             <- read.csv(file.path(dataPath,"Smoothed_span50_M_NotExtrapolated_NSASSMS2016.csv"),header=TRUE)
colnames(raw_M)   <- sub("X","",colnames(raw_M))
rownames(raw_M)   <- raw_M[,1]
raw_M             <- raw_M[,-1]# Trim off first column as it contains 'ages'
raw_M             <- cbind(replicate(as.numeric(colnames(raw_M)[1])-histMinYr,raw_M[,1]), raw_M)
raw_M             <- cbind(raw_M,raw_M[,dim(raw_M)[2]])
colnames(raw_M)   <- histMinYr:histMaxYr
# hack to set plus group, converting M array into an FLStock object, using the setPlusGroup, then back to array
# !!!!!! to be updated. Right now one uses an empty FLStock object. This is wrong as I think the setting of the plus group
# needs the catches as input
NSHM2             <- readFLStock(file.path(dataPath,"index.txt"),no.discards=TRUE,quiet=FALSE)
NSHM2@m[]         <- as.matrix(raw_M)
pg                <- NSH@range['max']
NSHM2             <- setPlusGroup(NSHM2,pg) # really wonder if the setPlusGroup does anything... Needs clarifying.
raw_M             <- drop(NSHM2@m)
fecYears
surveys
survey
#-------------------------------------------------------------------------------
# WKNSMSE
#
# Author: Benoit Berges
#         WMR, The Netherland
# email: benoit.berges@wur.nl
#
#  MSE of North Sea Herring
#
# Date: 2018/11/18
#
# Build for R3.5.1, 64bits
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# 1) load packages
#    setup paths
#    load functions
#-------------------------------------------------------------------------------
rm(list=ls())
library(FLSAM)
library(FLEDA)
# define path to directory
#path          <- "D:/Work/Herring MSE/NSAS/"
path              <- "D:/git/wk_WKNSMSE_her.27.3a47d/R/"
#path              <- "F:/WKNSMSE/wk_WKNSMSE_her.27.3a47d/R"
assessment_name   <- "NSAS_WKNSMSE2018"
try(setwd(path),silent=TRUE)
# paths to different subfolders
dataPath      <- file.path(".","data/")
outPath       <- file.path(".","results/")
scriptPath    <- file.path(".","side_scripts/")
functionPath  <- file.path(".","functions/")
# loading function
source(file.path(functionPath,"randBlocks.R"))
source(file.path(functionPath,"randNums.R"))
#-------------------------------------------------------------------------------
# 2) load assessment objects (single and multi fleet)
#    define MSE parameters
#    load raw M
#
# Note 1: the assessments we use is without the LAI index. The assessments that
# are ran during HAWG is using the LAI so results are slightly different. See
# 00_test_no_LAI.R for a comparison of the assessments. This is for convenience
# as the LAI is a component index and is weekly structured, therefore
# complicated to implement
#-------------------------------------------------------------------------------
#- Load single fleet and multi fleet assessment objects - using assessments without the LAI
#load(file.path(outPath,paste0(assessment_name,'_mf.Rdata')))
#load(file.path(outPath,paste0(assessment_name,'_sf.Rdata')))
load(file.path(outPath,paste0(assessment_name,'_mf_noLAI.Rdata')))
load(file.path(outPath,paste0(assessment_name,'_sf_noLAI.Rdata')))
# parameters
n.retro.years       <-  7                                       # Number of years for which to run the retrospective
nFutureyrs          <- 20
histMinYr           <- dims(NSH)$minyear
histMaxYr           <- dims(NSH)$maxyear
yearCurrent         <- histMinYr:histMaxYr # vector the years
futureMaxYr         <- histMaxYr + nFutureyrs
histPeriod          <- ac(histMinYr:histMaxYr)
projPeriod          <- ac((histMaxYr+1):futureMaxYr)
fullPeriod          <- c(histPeriod,projPeriod)
recrPeriod          <- ac(2007:2017)
selPeriod           <- ac(2007:2017)
fecYears            <- ac(2007:2017)
nits                <- 10 # number of random samples
# reading the raw M and applying plus group
raw_M             <- read.csv(file.path(dataPath,"Smoothed_span50_M_NotExtrapolated_NSASSMS2016.csv"),header=TRUE)
colnames(raw_M)   <- sub("X","",colnames(raw_M))
rownames(raw_M)   <- raw_M[,1]
raw_M             <- raw_M[,-1]# Trim off first column as it contains 'ages'
raw_M             <- cbind(replicate(as.numeric(colnames(raw_M)[1])-histMinYr,raw_M[,1]), raw_M)
raw_M             <- cbind(raw_M,raw_M[,dim(raw_M)[2]])
colnames(raw_M)   <- histMinYr:histMaxYr
# hack to set plus group, converting M array into an FLStock object, using the setPlusGroup, then back to array
# !!!!!! to be updated. Right now one uses an empty FLStock object. This is wrong as I think the setting of the plus group
# needs the catches as input
NSHM2             <- readFLStock(file.path(dataPath,"index.txt"),no.discards=TRUE,quiet=FALSE)
NSHM2@m[]         <- as.matrix(raw_M)
pg                <- NSH@range['max']
NSHM2             <- setPlusGroup(NSHM2,pg) # really wonder if the setPlusGroup does anything... Needs clarifying.
raw_M             <- drop(NSHM2@m)
#-------------------------------------------------------------------------------
# 3) create random samples using variance/covariance matrix
#-------------------------------------------------------------------------------
NSH.sim         <- simulate(NSH,NSH.tun,NSH.ctrl,n=nits)
names(NSH.sim)  <- paste0('iter',1:nits)
#-------------------------------------------------------------------------------
# 4) create FLStocks object using random samples (with future years as NA)
#-------------------------------------------------------------------------------
stocks          <- NSH + NSH.sim # from FLSAMs to FLStocks
stocks          <- window(window(stocks,end=histMaxYr+1),start=histMinYr,end=futureMaxYr) # extend the FLStock object to the full projection period
# update FLStocks object with random samples infered from variance/co-variance matrix
for(idxIter in 1:nits){
stocks[[idxIter]]@catch.n                    <- stocks[[idxIter]]@stock.n * stocks[[idxIter]]@harvest /
(stocks[[idxIter]]@harvest + stocks[[idxIter]]@m) *
(1 - exp(-stocks[[idxIter]]@harvest - stocks[[idxIter]]@m)) # compute catch numbers
stocks[[idxIter]]@catch.n[,ac(1978:1979)]    <- NA # fill in Na for the the closure catch data
stocks[[idxIter]]@landings.n                 <- stocks[[idxIter]]@catch.n
stocks[[idxIter]]@harvest.spwn[,projPeriod]  <- stocks[[idxIter]]@harvest.spwn[,ac(histMaxYr)] # propagate Fprop before spawning
stocks[[idxIter]]@m.spwn[,projPeriod]        <- stocks[[idxIter]]@m.spwn[,ac(histMaxYr)] # propagate Mprop before spawning
}
