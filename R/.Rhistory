rwF   <- wF
for(idxIter in 1:nits){
for(idxAge in 1:length(ages)){
# compute F at age with residuals estimated through a random walk (cumsum across the years)
rwF[idxAge,,,,,idxIter] <-  Ftemp[idxAge] + cumsum(drop(wF[idxAge,,,,,idxIter]))
}
# define ages for Fbar, 2-6 for the A fleet, 0-1 for B C and D fleets
if(fleets[idxFleet]=='A') Fbarages <- ac(2:6) else Fbarages <- ac(0:1)
# compute Fbar for each year in the current iteration
Fbar <- apply(exp(rwF[Fbarages,,,,,idxIter]),2,mean)
# compute selectivity as S(a,y) = F(a,y)/Fbar
for(idxYear in 1:dim(rwF)[2]){
rwF[,idxYear,,,,idxIter] <- exp(rwF[,idxYear,,,,idxIter])/drop(Fbar[,idxYear])
rwF[,idxYear,,,,idxIter] <- rwF[,idxYear,,,,idxIter]/max(rwF[,idxYear,,,,idxIter])
}
# fill in final FLQuant object
fisheryFuture[,,fleets[idxFleet],'sel',,idxIter] <- rwF[,,,,,idxIter]
}
}
############# plot selectivity #############
############# fill in FLQuant object with Fs #############
for(idxIter in 1:nits){
fisheryFuture[,1,'A','F',,idxIter]   <- NSH3f.sam@harvest[,'2018',,,'A']
fisheryFuture[,1,'C','F',,idxIter]   <- NSH3f.sam@harvest[,'2018',,,'C']
fisheryFuture[,1,'BD','F',,idxIter]  <- NSH3f.sam@harvest[,'2018',,,'BD']
fisheryFuture[,,'A','catch.wt',,idxIter]   <- multiFleet_catch.wt[,,1,idxIter]
fisheryFuture[,,'BD','catch.wt',,idxIter]   <- multiFleet_catch.wt[,,2,idxIter]
fisheryFuture[,,'C','catch.wt',,idxIter]  <- multiFleet_catch.wt[,,3,idxIter]
}
save(stocks,
surveys,
FCPropIts,
fisheryFuture,
NSH.sim,
NSH.ctrl,
qMat,
varCatchMat,
varSurvMat,
file=file.path(outPath,paste0(assessment_name,'_init_MSE.RData')))
# save parameters
save(n.retro.years,
nFutureyrs,
histMinYr,
histMaxYr,
yearCurrent,
futureMaxYr,
histPeriod,
projPeriod,
fullPeriod,
recrPeriod,
selPeriod,
fecYears,
nits,
file=file.path(outPath,paste0(assessment_name,'_parameters_MSE.RData')))
#-------------------------------------------------------------------------------
# WKNSMSE
#
# Author: Benoit Berges
#         WMR, The Netherland
# email: benoit.berges@wur.nl
#
#  MSE of North Sea Herring
#
# Date: 2018/11/18
#
# Build for R3.5.1, 64bits
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# 1) load packages
#    setup paths
#    load functions
#-------------------------------------------------------------------------------
rm(list=ls())
library(FLSAM)
library(FLEDA)
library(minpack.lm)  # install.packages("minpack.lm")
# define path to directory
#path          <- "D:/Work/Herring MSE/NSAS/"
path              <- "D:/git/wk_WKNSMSE_her.27.3a47d/R/"
#path              <- "F:/WKNSMSE/wk_WKNSMSE_her.27.3a47d/R"
assessment_name   <- "NSAS_WKNSMSE2018"
try(setwd(path),silent=TRUE)
# paths to different subfolders
dataPath      <- file.path(".","data/")
outPath       <- file.path(".","results/")
scriptPath    <- file.path(".","side_scripts/")
functionPath  <- file.path(".","functions/")
source(file.path(functionPath,"optF_TACdiff.R"))
source(file.path(functionPath,"stf_ImY.R"))
#-------------------------------------------------------------------------------
# 2) Initialize
#
# Define MSE parameters,
# load objects initialized previously
#   * Biology
#     - stocks
#     - surveys
#   * Fisheries
#     - FCProp
#     - catchD
#     - F sel: FAsel, FCsel, FBDsel
#-------------------------------------------------------------------------------
# load object
load(file.path(outPath,paste0(assessment_name,'_init_MSE.RData')))
# load MSE parameters
load(file.path(outPath,paste0(assessment_name,'_parameters_MSE.RData')))
strFleet  <- c('A','B','C','D')
nFleets   <- length(strFleet)
nAges     <- dim(stocks[[1]])[1]
#-------------------------------------------------------------------------------
# 2) Organize objects
# here, 2 main objects are defined:
#   * biology
#   * fishery object for each fleet
#-------------------------------------------------------------------------------
#------------------------------------------------------------------------------#
# 3) Define TACs for A, B and D fleets.
# TACs for A and B fleets are taken out of HAWG2018. This needs updating
#
# Note 1: The Cfleet is defined as a proportion of F.
# Note 2: TAC for C and D fleets are for the WB
# Note 3: TACs for the D fleet is kept constant for future years
#------------------------------------------------------------------------------#
TAC                                   <- FLQuant(NA,dimnames=list(age='all',
year=histMinYr:(futureMaxYr+3),
unit=c('TAC'),
season='all',
area=c('A','B','C','D'),
iter=1:nits))
# TAC for A fleet in NS
TAC_A                     <- read.table(file.path(dataPath,'TAC_A.csv'),sep = ",")
TAC[,ac(TAC_A[,1]),,,"A"] <- TAC_A[,2]
# TAC for B fleet in NS
TAC_B                     <- read.table(file.path(dataPath,'TAC_B.csv'),sep = ",")
TAC[,ac(TAC_B[,1]),,,"B"] <- TAC_B[,2]
# TAC for D fleet in WB
TAC_D                     <- read.table(file.path(dataPath,'TAC_D.csv'),sep = ",")
TAC[,ac(TAC_D[,1]),,,"D"] <- TAC_D[,2]
TAC[,ac((max(TAC_D[,1])+1):(futureMaxYr+3)),,,"D"] <- TAC[,ac(max(TAC_D[,1])),,,"D"] # TAC is fixed for the D fleet
# TAC for C fleet in WB
TAC_C                     <- read.table(file.path(dataPath,'TAC_C.csv'),sep = ",")
TAC[,ac(TAC_C[,1]),,,"C"] <- TAC_C[,2]
# fixed TAC C in WB (used for transfer to the A fleet)
TAC[,ac((max(TAC_C[,1])+1):(futureMaxYr+3)),,,"C"] <- TAC_C[dim(TAC_C)[1],2]
# randomize TAC C in WB (used for transfer to the A fleet)
#TAC[,ac((max(TAC_C[,1])+1):(futureMaxYr+3)),,,"C"] <- rnorm(length((max(TAC_C[,1])+1):(futureMaxYr+3)),
#                                                            mean(TAC_C[,2]),
#                                                           sd(TAC_C[,2])) # set random TAC for the C fleet in WB
# setup variables for transfer, uptake and split
uptakeFleets <- read.table(file.path(dataPath,'over_underfishing2017.csv'),sep = ",")
# need to input the split for the D fleet - ask Henrik
# transfer from C fleet TAC to fleet A
Ctransfer   <- runif(length(projPeriod),min=0.4, max=0.5)    # Transfer of TAC from IIIa to IVa for C fleet in assessment year. Set between 0.4 and 0.5
# update for the D fleeta
Duptake     <- rep(1, length(projPeriod)) # assume full uptake for the D fleet
Dsplit      <- rep(0.60, length(projPeriod)) # NSAS/WBSS split randomization based on historical records. Fixed for now, need to contact henrik
# update for the B fleet
Buptake     <- rnorm (length(projPeriod),
mean(an(as.vector(uptakeFleets[2:16,3])),na.rm=TRUE), # mean over available historical values
sd(an(as.vector(uptakeFleets[2:16,3])),na.rm=TRUE))   # sd over available historical values
TAC_var     <- array(NA,
dim=c(length(projPeriod),
4),
dimnames=list('years' = projPeriod,
'var' = c('Ctransfer','Duptake','Dsplit','Buptake')))
TAC_var[,'Ctransfer'] <- Ctransfer
TAC_var[,'Duptake']   <- Duptake
TAC_var[,'Dsplit']    <- Dsplit
TAC_var[,'Buptake']   <- Buptake
#------------------------------------------------------------------------------#
# 4) run stf to get TAC in 2019. This is because the MP is different than what
# was calculated during HAWG2018
#
# This is used to update stocks which is the bio object.
#
# Note: the recruitment is inferred from SAM. This needs to be changed with a
# stock recruitment relationship.
#------------------------------------------------------------------------------#
# create stf object and calculate stock in ImY
stf <- stf_ImY( NSH.sim,
stocks,
fisheryFuture,
TAC,
TAC_var,
FCPropIts,
c('2018','2019','2020'))
iYr<-'2018'
for(idxIter in 1:nits){
resiCatch <- rnorm( length(varCatchMat[,2,idxIter]),
(1:length(varCatchMat[,2,idxIter]))*0,
varCatchMat[,2,idxIter]) # residual to add to the catch
stocks[[idxIter]]@catch.n[,iYr]  <- rowSums(stf@catch.n[,iYr,,,,idxIter])*exp(resiCatch)
stocks[[idxIter]]@catch[,iYr]    <- sum( rowSums(stf@catch.n[,iYr,,,,idxIter]* # catch.n per fleet
stf[,iYr,,,,idxIter]@catch.wt)* # catch.wt per fleet
exp(resiCatch)) # sum catches accross fleets
stocks[[idxIter]]@catch.wt[,iYr] <- NA # this is not relevant as catch weights are multi-fleet
# landings = catches + deviation
stocks[[idxIter]]@landings[,iYr]          <- sum(stf@catch[,iYr,,,,idxIter])
stocks[[idxIter]]@landings.n[,iYr]        <- rowSums(stf@catch.n[,iYr,,,,idxIter])
stocks[[idxIter]]@landings.wt[,iYr]       <- NA # this is not relevant as catch weights are multi-fleet
stocks[[idxIter]]@stock.n[,iYr]           <- stf@stock.n[,iYr,1,,,idxIter]
stocks[[idxIter]]@harvest[,iYr]           <- rowSums(stf@harvest[,iYr,,,,idxIter])
surveyNames <- unique(rownames(qMat)) # get all the survey names
for(idxSurvey in 1:length(surveyNames)){
qSelect     <- subset(qMat[,,idxIter],rownames(qMat) == surveyNames[idxSurvey])
varSurv     <- subset(varSurvMat[,,idxIter],rownames(varSurvMat) == surveyNames[idxSurvey])
resiSurv <- rnorm(  length(varSurv[,2]),
(1:length(varSurv[,2]))*0,
varSurv[,2]) # residual to add to the catch
# select number of age for the corresponding ages to the survey
NSelect     <- stocks[[idxIter]]@stock.n[match(as.character(qSelect[,1]),rownames(stocks[[idxIter]]@stock.n)), # filter ages
iYr]  # current year
NSelect     <- drop(NSelect) # drop dimensions with 1 level
FSelect     <-  stocks[[idxIter]]@harvest[match(as.character(qSelect[,1]),rownames(stocks[[idxIter]]@harvest)), # filter ages for F
iYr] # filter year
FSelect     <- drop(FSelect) # drop dimensions with 1 level
Z           <-  stocks[[idxIter]]@m[match(as.character(qSelect[,1]),rownames(stocks[[idxIter]]@m)), # filter ages for M
iYr]  # filter years for M
Z           <- Z + FSelect
surveyProp  <- mean(c(surveys[[surveyNames[idxSurvey]]]@range[6],surveys[[surveyNames[idxSurvey]]]@range[7]))
# filling survey index for current year
surveys[[surveyNames[idxSurvey]]]@index[,iYr,,,,idxIter] <- qSelect[,2]*exp(-Z*surveyProp)*NSelect*exp(resiSurv)
}
}
surveys@names
surveys$HERAS@range
surveys[[idxSurvey]]@range[4]
surveys[[idxSurvey]]@range[4]:an(iYr)
idxIter<-1
NSH <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr))
NSH.tun <- surveys
for(idxSurvey in 1:length(surveys)){
NSH.tun[[idxSurvey]] <- NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:an(iYr)),,,,idxIter]
}
NSH.tun
NSH.sam <- FLSAM(NSH,NSH.tun,NSH.ctrl)
NSH.ctrl
NSH.ctrl@range
NSH.ctrl@range[5]<-2019
NSH.sam <- FLSAM(NSH,NSH.tun,NSH.ctrl)
surveys$`IBTS-Q1`
surveys$`IBTS-Q1`@index
NSH.ctrl
load(file.path(outPath,paste0(assessment_name,'_sf_noLAI.Rdata')))
NSH.tun
NSH.tun$HERAS
idxIter<-1
NSH2 <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr))
NSH.tun2 <- surveys
for(idxSurvey in 1:length(surveys)){
NSH.tun2[[idxSurvey]] <- NSH.tun2[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:an(iYr)),,,,idxIter]
}
NSH.tun2$HERAS
NSH
NSH2
NSH.sam <- FLSAM(NSH,NSH.tun2,NSH.ctrl)
NSH.sam <- FLSAM(NSH,NSH.tun,NSH.ctrl)
NSH.sam <- FLSAM(NSH2,NSH.tun2,NSH.ctrl)
NSH2
NSH
NSH2@catch$unit
NSH2@catch$units
NSH2@catch@units
NSH2@discards
NSH2@discards.wt
NSH2@discards.n
NSH2@catch.n
NSH
NSH2@catch@units<-'tonnes'
NSH2@catch.n@units<-'thousands'
NSH2@catch.wt@units<-'kg'
NSH2@discards@units<-'tonnes'
NSH2@discards.n@units<-'thousands'
NSH2@discards.wt@units<-'kg'
NSH2@landings@units<-'tonnes'
NSH2@landings.n@units<-'thousands'
NSH2@landings.wt@units<-'kg'
NSH2@stock@units<-'tonnes'
NSH2@stock.n@units<-NA
NSH2@stock.wt@units<-'kg'
NSH2@m@units<-NA
NSH2@mat@units<-NA
NSH2@harvest@units<-'f'
NSH2@harvest.spwn@units<-NA
NSH2@m.spwn@units<-NA
NSH2@catch@units<-'tonnes'
NSH2@catch.n@units<-'thousands'
NSH2@catch.wt@units<-'kg'
NSH2@discards@units<-'tonnes'
NSH2@discards.n@units<-'thousands'
NSH2@discards.wt@units<-'kg'
NSH2@landings@units<-'tonnes'
NSH2@landings.n@units<-'thousands'
NSH2@landings.wt@units<-'kg'
NSH2@stock@units<-'tonnes'
NSH2@stock.n@units<-'NA'
NSH2@stock.wt@units<-'kg
'
NSH2@catch@units<-'tonnes'
NSH2@catch.n@units<-'thousands'
NSH2@catch.wt@units<-'kg'
NSH2@discards@units<-'tonnes'
NSH2@discards.n@units<-'thousands'
NSH2@discards.wt@units<-'kg'
NSH2@landings@units<-'tonnes'
NSH2@landings.n@units<-'thousands'
NSH2@landings.wt@units<-'kg'
NSH2@stock@units<-'tonnes'
NSH2@stock.n@units<-'NA'
NSH2@stock.wt@units<-'kg'
NSH2@m@units<-'NA'
NSH2@mat@units<-'NA'
NSH2@harvest@units<-'f'
NSH2@harvest.spwn@units<-'NA'
NSH2@m.spwn@units<-'NA'
NSH2
NSH
NSH@catch
NSH2@catch
NSH2@catch.n
NSH2catch.n
NSH@catch.n
NSH@catch.n<-NSH2@catch.n[,1:71]
NSH@catch.n
NSH.sam <- FLSAM(NSH,NSH.tun2,NSH.ctrl)
load(file.path(outPath,paste0(assessment_name,'_sf_noLAI.Rdata')))
NSH@catch.wt
NSH2@catch.wt
NSH2@stock.n
NSH2@stock.wt
NSH2@harvest
NSH@harvest
NSH2@harvest
NSH2@m
NSH2@mat
NSH2@m.spwn
NSH2@discards.wt
NSH2@catch.wt
NSH2@catch.wt[,'2018']<-NSH2@catch.wt[,'2017']
NSH2@catch.wt
NSH2@discards.wt
NSH2@discards.wt[,'2018']<-NSH2@discards.wt[,'2017']
NSH2@landings.wt[,'2018']<-NSH2@landings.wt[,'2017']
NSH2@catch
NSH2@catch.n
NSH2@catch.wt
NSH2@discards
NSH2@discards[,'2018']<-0
NSH2@discards
NSH2@discards.n
NSH3<-NSH2
NSH3[,'2018']<-NSH3[,'2017']
NSH.sam <- FLSAM(NSH3,NSH.tun2,NSH.ctrl)
dim(fisheryFuture)\
dim(fisheryFuture)
fisheryFuture[,'iYr']
fisheryFuture[,iYr]
fisheryFuture[,iYr,1]
fisheryFuture[,iYr,'A']
dim(fisheryFuture[,iYr,'A'])
dim(fisheryFuture[,iYr,'A',,,1])
dim(fisheryFuture[,iYr,'A',,,2])
dim(fisheryFuture[,iYr,,,,1])
fisheryFuture[,iYr,,,,1]
fisheryFuture[,iYr,,'catch.wt',,1]
mean(fisheryFuture[,iYr,,'catch.wt',,1])
?mean
apply(fisheryFuture[,iYr,,'catch.wt',,1],2,mean)
apply(drop(fisheryFuture[,iYr,,'catch.wt',,1]),2,mean)
apply(drop(fisheryFuture[,iYr,,'catch.wt',,1]),1,mean)
for(idxIter in 1:nits){
resiCatch <- rnorm( length(varCatchMat[,2,idxIter]),
(1:length(varCatchMat[,2,idxIter]))*0,
varCatchMat[,2,idxIter]) # residual to add to the catch
stocks[[idxIter]]@catch.n[,iYr]  <- rowSums(stf@catch.n[,iYr,,,,idxIter])*exp(resiCatch)
stocks[[idxIter]]@catch[,iYr]    <- sum( rowSums(stf@catch.n[,iYr,,,,idxIter]* # catch.n per fleet
stf[,iYr,,,,idxIter]@catch.wt)* # catch.wt per fleet
exp(resiCatch)) # sum catches accross fleets
stocks[[idxIter]]@catch.wt[,iYr] <- apply(drop(fisheryFuture[,iYr,,'catch.wt',,1]),1,mean) # weight at age as mean accross the fleets
# landings = catches + deviation
stocks[[idxIter]]@landings[,iYr]          <- sum(stf@catch[,iYr,,,,idxIter])
stocks[[idxIter]]@landings.n[,iYr]        <- rowSums(stf@catch.n[,iYr,,,,idxIter])
stocks[[idxIter]]@landings.wt[,iYr]       <- apply(drop(fisheryFuture[,iYr,,'catch.wt',,1]),1,mean) # this is not relevant as catch weights are multi-fleet
stocks[[idxIter]]@stock.n[,iYr]           <- stf@stock.n[,iYr,1,,,idxIter]
stocks[[idxIter]]@harvest[,iYr]           <- rowSums(stf@harvest[,iYr,,,,idxIter])
surveyNames <- unique(rownames(qMat)) # get all the survey names
for(idxSurvey in 1:length(surveyNames)){
qSelect     <- subset(qMat[,,idxIter],rownames(qMat) == surveyNames[idxSurvey])
varSurv     <- subset(varSurvMat[,,idxIter],rownames(varSurvMat) == surveyNames[idxSurvey])
resiSurv <- rnorm(  length(varSurv[,2]),
(1:length(varSurv[,2]))*0,
varSurv[,2]) # residual to add to the catch
# select number of age for the corresponding ages to the survey
NSelect     <- stocks[[idxIter]]@stock.n[match(as.character(qSelect[,1]),rownames(stocks[[idxIter]]@stock.n)), # filter ages
iYr]  # current year
NSelect     <- drop(NSelect) # drop dimensions with 1 level
FSelect     <-  stocks[[idxIter]]@harvest[match(as.character(qSelect[,1]),rownames(stocks[[idxIter]]@harvest)), # filter ages for F
iYr] # filter year
FSelect     <- drop(FSelect) # drop dimensions with 1 level
Z           <-  stocks[[idxIter]]@m[match(as.character(qSelect[,1]),rownames(stocks[[idxIter]]@m)), # filter ages for M
iYr]  # filter years for M
Z           <- Z + FSelect
surveyProp  <- mean(c(surveys[[surveyNames[idxSurvey]]]@range[6],surveys[[surveyNames[idxSurvey]]]@range[7]))
# filling survey index for current year
surveys[[surveyNames[idxSurvey]]]@index[,iYr,,,,idxIter] <- qSelect[,2]*exp(-Z*surveyProp)*NSelect*exp(resiSurv)
}
}
idxIter<-1
NSH <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr))
NSH.tun <- surveys
for(idxSurvey in 1:length(surveys)){
NSH.tun[[idxSurvey]] <- NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:an(iYr)),,,,idxIter]
}
NSH.sam <- FLSAM(NSH,NSH.tun,NSH.ctrl)
NSH <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr)-1)
NSH.tun <- surveys
for(idxSurvey in 1:length(surveys)){
NSH.tun[[idxSurvey]] <- NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:an(iYr)-1),,,,idxIter]
}
NSH.sam <- FLSAM(NSH,NSH.tun,NSH.ctrl)
NSH <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr)-1)
NSH.tun <- surveys
idxSurvey<-1
NSH.tun[[idxSurvey]] <- NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:an(iYr)-1),,,,idxIter]
ac(surveys[[idxSurvey]]@range[4]:an(iYr)-1)
NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:an(iYr)-1),,,,idxIter]
NSH.tun[[idxSurvey]]
dim(NSH.tun[[idxSurvey]])
NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:an(iYr)-1)]
ac(surveys[[idxSurvey]]@range[4]:an(iYr)-1)
ac(surveys[[idxSurvey]]@range
NSH.tun[[idxSurvey]]@index
dim(NSH.tun[[idxSurvey]])
NSH.tun[[idxSurvey]][,1:10]
NSH.tun[[idxSurvey]][,1:10]@index
NSH.tun[[idxSurvey]][,ac(1947:2017)]@index
NSH.tun[[idxSurvey]][,'1947']@index
an(iYr)
NSH <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr)-1)
NSH.tun <- surveys
for(idxSurvey in 1:length(surveys)){
NSH.tun[[idxSurvey]] <- NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:an(iYr)),,,,idxIter]
}
NSH <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr)-1)
NSH.tun <- surveys
for(idxSurvey in 1:length(surveys)){
NSH.tun[[idxSurvey]] <- NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:(an(iYr)-1)),,,,idxIter]
}
NSH.sam <- FLSAM(NSH,NSH.tun,NSH.ctrl)
load(file.path(outPath,paste0(assessment_name,'_sf_noLAI.Rdata')))
NSH.sam <- FLSAM(NSH,NSH.tun,NSH.ctrl)
NSH <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr)-1)
NSH.tun <- surveys
for(idxSurvey in 1:length(surveys)){
NSH.tun[[idxSurvey]] <- NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:(an(iYr)-1)),,,,idxIter]
}
NSH.sam <- FLSAM(NSH,NSH.tun,NSH.ctrl)
dimnames(NSH)
dimnames(NSH@catch)
load(file.path(outPath,paste0(assessment_name,'_sf_noLAI.Rdata')))
NSH2 <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr)-1)
NSH.tun2 <- surveys
for(idxSurvey in 1:length(surveys)){
NSH.tun2[[idxSurvey]] <- NSH.tun2[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:(an(iYr)-1)),,,,idxIter]
}
dimnames(NSH@catch)
dimnames(NSH2@catch)
dimnames(NSH.tun$HERAS)
dimnames(NSH.tun$HERAS@index)
dimnames(NSH.tun2$HERAS@index)
dimnames(NSH.tun2$HERAS@sel.pattern)
dimnames(NSH.tun$HERAS@sel.pattern)
NSH.ctrl
NSH.ctrl@range
NSH.ctrl@range[5]<-2017
NSH.sam <- FLSAM(NSH2,NSH.tun2,NSH.ctrl)
NSH <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr))
NSH.tun <- surveys
for(idxSurvey in 1:length(surveys)){
NSH.tun[[idxSurvey]] <- NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:an(iYr)),,,,idxIter]
}
an(iYr)
NSH <- window(  stocks[[idxIter]],
start=an(fullPeriod[1]),
end=an(iYr))
NSH.tun <- surveys
for(idxSurvey in 1:length(surveys)){
NSH.tun[[idxSurvey]] <- NSH.tun[[idxSurvey]][,ac(surveys[[idxSurvey]]@range[4]:an(iYr)),,,,idxIter]
}
NSH.ctrl@range[5] <- an(iYr)
NSH.sam <- FLSAM(NSH,NSH.tun,NSH.ctrl)
NSH@catch.wt
