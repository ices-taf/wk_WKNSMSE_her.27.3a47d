#c(r1,r2)
#if(idxIter %in% itersSR)
if(!is.na(match(idxIter,itersSR)))
as.vector(ifelse( c(ssb(iter(biol[,ac(iYr-1)],idxIter)))<=params(iter(biol.sr,idxIter))["b"],
params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))),
params(iter(biol.sr,idxIter))["a"] * params(iter(biol.sr,idxIter))["b"]))
#c(r1,0)
#if Ricker
#if(idxIter %in% itersRI)
if(!is.na(match(idxIter,itersRI)))
as.vector(params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))) * exp(-params(iter(biol.sr,idxIter))["b"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter)))))
#c(0,r2)
}
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
r
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
require(doParallel)
ncores <- detectCores()-1
#ncores <- ifelse(iters<ncores,nits,ncores)
cl <- makeCluster(ncores) #set up nodes
clusterEvalQ(cl,library(FLSAM))
clusterEvalQ(cl,library(stockassessment))
registerDoParallel(cl)
r<- foreach(idxIter=(1:(dims(biol)$iter/4))) %dopar% {
# if SR
#r1<-as.vector(ifelse( c(ssb(iter(biol[,ac(iYr-1)],idxIter)))<=params(iter(biol.sr,idxIter))["b"],
#                  params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))),
#                  params(iter(biol.sr,idxIter))["a"] * params(iter(biol.sr,idxIter))["b"]))
#r2<-as.vector(params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))) * exp(-params(iter(biol.sr,idxIter))["b"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter)))))
#c(r1,r2)
#if(idxIter %in% itersSR)
if(!is.na(match(idxIter,itersSR)))
r1<- as.vector(ifelse( c(ssb(iter(biol[,ac(iYr-1)],idxIter)))<=params(iter(biol.sr,idxIter))["b"],
params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))),
params(iter(biol.sr,idxIter))["a"] * params(iter(biol.sr,idxIter))["b"]))
c(r1,0)
#if Ricker
#if(idxIter %in% itersRI)
if(!is.na(match(idxIter,itersRI)))
r2<- as.vector(params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))) * exp(-params(iter(biol.sr,idxIter))["b"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter)))))
c(0,r2)
}
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
require(doParallel)
ncores <- detectCores()-1
#ncores <- ifelse(iters<ncores,nits,ncores)
cl <- makeCluster(ncores) #set up nodes
clusterEvalQ(cl,library(FLSAM))
clusterEvalQ(cl,library(stockassessment))
registerDoParallel(cl)
r<- foreach(idxIter=(1:(dims(biol)$iter/4))) %dopar% {
# if SR
#r1<-as.vector(ifelse( c(ssb(iter(biol[,ac(iYr-1)],idxIter)))<=params(iter(biol.sr,idxIter))["b"],
#                  params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))),
#                  params(iter(biol.sr,idxIter))["a"] * params(iter(biol.sr,idxIter))["b"]))
#r2<-as.vector(params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))) * exp(-params(iter(biol.sr,idxIter))["b"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter)))))
#c(r1,r2)
#if(idxIter %in% itersSR)
if(!is.na(match(idxIter,itersSR))){
r1<- as.vector(ifelse( c(ssb(iter(biol[,ac(iYr-1)],idxIter)))<=params(iter(biol.sr,idxIter))["b"],
params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))),
params(iter(biol.sr,idxIter))["a"] * params(iter(biol.sr,idxIter))["b"]))
c(r1,0)
}
#if Ricker
#if(idxIter %in% itersRI)
if(!is.na(match(idxIter,itersRI))){
r2<- as.vector(params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))) * exp(-params(iter(biol.sr,idxIter))["b"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter)))))
c(0,r2)
}
}
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
r
r[[1]]
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
require(doParallel)
ncores <- detectCores()-1
#ncores <- ifelse(iters<ncores,nits,ncores)
cl <- makeCluster(ncores) #set up nodes
clusterEvalQ(cl,library(FLSAM))
clusterEvalQ(cl,library(stockassessment))
registerDoParallel(cl)
r<- foreach(idxIter=(1:(dims(biol)$iter/4))) %dopar% {
r1<-as.vector(ifelse( c(ssb(iter(biol[,ac(iYr-1)],idxIter)))<=params(iter(biol.sr,idxIter))["b"],
params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))),
params(iter(biol.sr,idxIter))["a"] * params(iter(biol.sr,idxIter))["b"]))
r2<-as.vector(params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))) * exp(-params(iter(biol.sr,idxIter))["b"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter)))))
c(r1,r2)
}
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
require(doParallel)
ncores <- detectCores()-1
#ncores <- ifelse(iters<ncores,nits,ncores)
cl <- makeCluster(ncores) #set up nodes
clusterEvalQ(cl,library(FLSAM))
clusterEvalQ(cl,library(stockassessment))
registerDoParallel(cl)
r<- foreach(idxIter=(1:dims(biol)$iter)) %dopar% {
r1<-as.vector(ifelse( c(ssb(iter(biol[,ac(iYr-1)],idxIter)))<=params(iter(biol.sr,idxIter))["b"],
params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))),
params(iter(biol.sr,idxIter))["a"] * params(iter(biol.sr,idxIter))["b"]))
r2<-as.vector(params(iter(biol.sr,idxIter))["a"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter))) * exp(-params(iter(biol.sr,idxIter))["b"] * c(ssb(iter(biol[,ac(iYr-1)],idxIter)))))
c(r1,r2)
}
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
recruitBio <- array( 0, dim=c(1,nits)) # initialize array
recruitBio[itersRI] <- r[[itersRI]]
r[[itersRI]]
itersRI
dim(r)
r[[1]]
r[[2]]
r[[2]][1]
r[[2]][2]
r[[itersRI[1]]][2]
r[[itersRI][2]
r[[itersRI]][2]
recruitBio <- array( 0, dim=c(1,nits)) # initialize array
for(idxIter in 1:nits){
if(idxIter %in% itersSR)
recruitBio[idxIter]<-r[[idxIter]][1]
if(idxIter %in% itersRI)
recruitBio[idxIter]<-r[[idxIter]][2]
}
recruitBio
recruitBio(1)
recruitBio[1]
DtY
recruitBio     <- recruitBio * exp(sr.res[,DtY])
dim(exp(sr.res[,DtY]))
recruitBio     <- recruitBio * exp(drop(sr.res[,DtY]))
recruitBio
recruitBio[1]
###################################################################################
############################ Update F ##########################################
###################################################################################
biol@harvest[,DtY]  <- apply(fishery@landings.sel[,DtY],c(1,2,4,5,6),'sum')
Z <- biol@harvest[,DtY] + biol@m[,DtY]
dim(Z)
biol@harvest[,DtY]
iter(biol@harvest[,DtY],1)
iter(biol@harvest[,DtY],2)
iter(biol@harvest[,DtY],3)
iter(biol@harvest[,DtY],4)
iter(biol@harvest[,DtY],5)
iter(biol@harvest[,DtY],6)
iter(biol@harvest[,DtY],7)
iter(biol@harvest[,DtY],8)
iter(biol@harvest[,DtY],500)
iter(biol@harvest[,'2017'],500)
plot(iter(biol,1))
plot(iter(biol,2))
plot(iter(biol,500))
plot(iter(biol,1000))
# compute stock
# propagate stock number with Z, only fill first slot
survivors                           <- drop(biol@stock.n[,ac(an(DtY)-1),1])*exp(-drop(Z)) # stock.n is the same for all fleets in the stf object, taking first element
biol@stock.n[2:nAges,DtY]           <- survivors[1:(nAges-1),]
biol@stock.n[nAges,DtY]             <- biol@stock.n[nAges,DtY,1] + survivors[nAges,]
biol@stock.n[1,DtY]                 <- recruitBio
biol@stock[,DtY]                    <- computeStock(biol[,DtY])
recruitBio
dim(recruitBio)
dim(biol@stock.n[1,DtY])
biol@stock.n[1,DtY]
recruitBio[1]
iter(biol@stock.n[1,DtY],1)
plot(iter(biol,800))
iter(biol@harvest,800)
varProccError
nAges
DtY
an(DtY)-idxAge-1
idxAge<-1
an(DtY)-idxAge-1
an(DtY)-idxAge+1
an(DtY)-(idxAge-1)
an(DtY)
idxAge<-2
an(DtY)-(idxAge-1)
varProccError[idxAge,an(DtY)-(idxAge-1)]
idxAge
dim(varProccError)
varProccError[idxAge,ac(an(DtY)-(idxAge-1))]
biol@stock[idxAge,DtY]*varProccError[idxAge,ac(an(DtY)-(idxAge-1))]
DtY
varProccError
ac(an(DtY)-(idxAge-1))
varProccError[idxAge,ac(an(DtY)-(idxAge-1))]
biol@stock[idxAge,DtY]
idxAge
DtY
biol@stock.n[idxAge,DtY]*varProccError[idxAge,ac(an(DtY)-(idxAge-1))]
iter(biol@stock.n[idxAge,DtY],1)
iter(biol@stock.n[idxAge,DtY]*varProccError[idxAge,ac(an(DtY)-(idxAge-1))],1)
for(idxAge in 2:nAges){
biol@stock.n[idxAge,DtY] <- biol@stock.n[idxAge,DtY]*varProccError[idxAge,ac(an(DtY)-(idxAge-1))]
}
idxAge
for(idxAge in 2:nAges){
biol@stock.n[idxAge,DtY] <- biol@stock.n[idxAge,DtY]*varProccError[idxAge-1,ac(an(DtY)-(idxAge-1))]
}
survivors                           <- drop(biol@stock.n[,ac(an(DtY)-1),1])*exp(-drop(Z)) # stock.n is the same for all fleets in the stf object, taking first element
biol@stock.n[2:nAges,DtY]           <- survivors[1:(nAges-1),]
biol@stock.n[nAges,DtY]             <- biol@stock.n[nAges,DtY,1] + survivors[nAges,]
biol@stock.n[1,DtY]                 <- recruitBio
for(idxAge in 2:nAges){
biol@stock.n[idxAge,DtY] <- biol@stock.n[idxAge,DtY]*varProccError[idxAge-1,ac(an(DtY)-(idxAge-1))]
}
biol@stock[,DtY]                    <- computeStock(biol[,DtY])
Z
catchVar
dim(catchVar)
catchVar[,,,'residuals']
iter(catchVar[,,,'residuals'],1)
drop(biol@harvest[,DtY])
drop(biol@harvest[,DtY])*drop(biol@stock.n[,DtY])*drop((1-exp(-Z))/Z)
dim(drop(biol@harvest[,DtY])*drop(biol@stock.n[,DtY])*drop((1-exp(-Z))/Z))
dim(Z)
iter(catchVar[,,DtY,,'residuals'],1)
catchVar[,,DtY,,'residuals']
iter(catchVar[,DtY,,,'residuals'],1)
catchVar[,DtY,,,'residuals']
dim(catchVar)
DtY
catchVar[,DtY]
catchVar[,DtY,,'residuals']
iter(catchVar[,DtY,,'residuals'],1)
drop(biol@harvest[,DtY])*drop(biol@stock.n[,DtY])*drop((1-exp(-Z))/Z)*catchVar[,DtY,,'residuals']
drop(biol@harvest[,DtY])*drop(biol@stock.n[,DtY])*drop((1-exp(-Z))/Z)*drop(catchVar[,DtY,,'residuals'])
biol@catch.n[,DtY] <- drop(biol@harvest[,DtY])*drop(biol@stock.n[,DtY])*drop((1-exp(-Z))/Z)*drop(catchVar[,DtY,,'residuals'])
stf@landings.n[,ImY]  <- drop(biol@harvest[,DtY])*drop(biol@stock.n[,DtY])*drop((1-exp(-Z))/Z)
biol@catch       <- computeCatch(biol)
biol@landings    <- computeLandings(biol)
iter(biol@catch,1)
iter(biol@catch,2)
iter(biol@catch,3)
iter(biol@catch,4)
iter(biol@catch,5)
iter(biol@catch,6)
iter(biol@catch,7)
iter(biol@catch,8)
iter(biol@catch,9)
iter(biol@catch,8)
plot(iter(biol,8))
plot(iter(biol,9))
plot(iter(biol,10))
plot(iter(biol,50))
plot(iter(biol,60))
surveyNames
idxSurvey<-idxSurvey[1]
idxSurvey<-idxSurvey[[1]]
idxSurvey<-surveyNames[1]
agesSurvey  <- an(rownames(surveys[[idxSurvey]]@index))
nAgesSurvey <- length(agesSurvey)
yearSurvey  <- an(colnames(surveys[[idxSurvey]]@index))
surveyProp  <- mean(c(surveys[[idxSurvey]]@range[6],surveys[[idxSurvey]]@range[7]))
surveyProp
dim(surveyVars)
surveyVars[,,,'catchability']
surveyVars[,,,'catchabilities']
surveyVars[,,,'residuals']
Z
Z[0,]
Z['0',]
agesSurvey
dim(surveyVars)
surveyVars[,DtY,idxSurvey,'residuals']
surveyVars[ac(agesSurvey),DtY,idxSurvey,'catchabilities']
for(idxSurvey in surveyNames){
agesSurvey  <- an(rownames(surveys[[idxSurvey]]@index))
yearSurvey  <- an(colnames(surveys[[idxSurvey]]@index))
surveyProp  <- mean(c(surveys[[idxSurvey]]@range[6],surveys[[idxSurvey]]@range[7]))
surveys[[idxSurvey]]@index[,DtY] <- surveyVars[ac(agesSurvey),DtY,idxSurvey,'catchabilities']*
drop(exp(-Z[ac(agesSurvey),DtY]*surveyProp)*
biol@stock.n[ac(agesSurvey),DtY])*surveyVars[ac(agesSurvey),DtY,idxSurvey,'residuals']
}
idxSurvey
agesSurvey  <- an(rownames(surveys[[idxSurvey]]@index))
yearSurvey  <- an(colnames(surveys[[idxSurvey]]@index))
surveyProp  <- mean(c(surveys[[idxSurvey]]@range[6],surveys[[idxSurvey]]@range[7]))
surveyVars[ac(agesSurvey),DtY,idxSurvey,'catchabilities']*
drop(exp(-Z[ac(agesSurvey),DtY]*surveyProp)
drop(exp(-Z[ac(agesSurvey),DtY]*surveyProp)*
biol@stock.n[ac(agesSurvey),DtY])
for(idxSurvey in surveyNames){
agesSurvey  <- an(rownames(surveys[[idxSurvey]]@index))
yearSurvey  <- an(colnames(surveys[[idxSurvey]]@index))
surveyProp  <- mean(c(surveys[[idxSurvey]]@range[6],surveys[[idxSurvey]]@range[7]))
surveys[[idxSurvey]]@index[,DtY] <- drop(surveyVars[ac(agesSurvey),DtY,idxSurvey,'catchabilities'])*
drop(exp(-Z[ac(agesSurvey),DtY]*surveyProp)*
biol@stock.n[ac(agesSurvey),DtY])*drop(surveyVars[ac(agesSurvey),DtY,idxSurvey,'residuals'])
}
idxSurvey
agesSurvey  <- an(rownames(surveys[[idxSurvey]]@index))
yearSurvey  <- an(colnames(surveys[[idxSurvey]]@index))
surveyProp  <- mean(c(surveys[[idxSurvey]]@range[6],surveys[[idxSurvey]]@range[7]))
surveys[[idxSurvey]]@index[,DtY] <- drop(surveyVars[ac(agesSurvey),DtY,idxSurvey,'catchabilities'])*
drop(exp(-Z[ac(agesSurvey),DtY]*surveyProp)*
biol@stock.n[ac(agesSurvey),DtY])*drop(surveyVars[ac(agesSurvey),DtY,idxSurvey,'residuals'])
for(idxSurvey in surveyNames){
agesSurvey  <- an(rownames(surveys[[idxSurvey]]@index))
yearSurvey  <- an(colnames(surveys[[idxSurvey]]@index))
surveyProp  <- mean(c(surveys[[idxSurvey]]@range[6],surveys[[idxSurvey]]@range[7]))
surveys[[idxSurvey]]@index[,DtY] <- drop(surveyVars[ac(agesSurvey),DtY,idxSurvey,'catchabilities'])*
drop(exp(-Z[ac(agesSurvey),DtY]*surveyProp)*
biol@stock.n[ac(agesSurvey),DtY])*drop(surveyVars[ac(agesSurvey),DtY,idxSurvey,'residuals'])
}
# filter stock object up to intermediate year to include biological variables
stkAssessement <- window(  biol,
start=an(fullPeriod[1]),
end=an(DtY))
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
#-------------------------------------------------------------------------------
# Assessment
#-------------------------------------------------------------------------------
# filter stock object up to intermediate year to include biological variables
stkAssessement <- window(  biol,
start=an(fullPeriod[1]),
end=an(DtY))
stkAssessement@catch.n  <- stkAssessement@landings.n
stkAssessement@catch    <- computeCatch(stkAssessement)
# smooth M prior to running the assessment, median filter of order 5
for(idxIter in 1:nits){
for(idxAge in 1:nAges){
stkAssessement@m[idxAge,,,,,idxIter] <- runmed(stkAssessement@m[idxAge,,,,,idxIter],k=5)
}
}
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
require(doParallel)
ncores <- detectCores()-1
#ncores <- ifelse(iters<ncores,nits,ncores)
cl <- makeCluster(ncores) #set up nodes
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
require(doParallel)
ncores <- detectCores()-1
#ncores <- ifelse(iters<ncores,nits,ncores)
cl <- makeCluster(ncores) #set up nodes
clusterEvalQ(cl,library(FLSAM))
clusterEvalQ(cl,library(stockassessment))
registerDoParallel(cl)
# smooth M prior to running the assessment, median filter of order 5
for(idxIter in 1:nits){
for(idxAge in 1:nAges){
stkAssessement@m[idxAge,,,,,idxIter] <- runmed(stkAssessement@m[idxAge,,,,,idxIter],k=5)
}
}
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
for(idxIter in 1:nits){
print(idxIter)
for(idxAge in 1:nAges){
stkAssessement@m[idxAge,,,,,idxIter] <- runmed(stkAssessement@m[idxAge,,,,,idxIter],k=5)
}
}
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
require(doParallel)
ncores <- detectCores()-1
#ncores <- ifelse(iters<ncores,nits,ncores)
cl <- makeCluster(ncores) #set up nodes
dim(stkAssessement@m)
dim(stkAssessement@m)[1]
nAges
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
require(doParallel)
ncores <- detectCores()-1
#ncores <- ifelse(iters<ncores,nits,ncores)
cl <- makeCluster(ncores) #set up nodes
clusterEvalQ(cl,library(FLSAM))
clusterEvalQ(cl,library(stockassessment))
registerDoParallel(cl)
r<- foreach(idxIter=(1:dims(biol)$iter)) %dopar% {
A <- array(NA,dim=c(1,dim(stkAssessement@m)[1]))
for(idxAge in 1:dim(stkAssessement@m)[1])
A[idxAge] <- runmed(stkAssessement@m[dim(stkAssessement@m)[1],,,,,idxIter],k=5)
A
}
# smooth M prior to running the assessment, median filter of order 5
#for(idxIter in 1:nits){
#  print(idxIter)
#  for(idxAge in 1:nAges){
#    stkAssessement@m[idxAge,,,,,idxIter] <- runmed(stkAssessement@m[idxAge,,,,,idxIter],k=5)
#  }
#}
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
r
r[[1]]
dim(stkAssessement@m)[1]
dim(stkAssessement@m)[2]
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
require(doParallel)
ncores <- detectCores()-1
#ncores <- ifelse(iters<ncores,nits,ncores)
cl <- makeCluster(ncores) #set up nodes
clusterEvalQ(cl,library(FLSAM))
clusterEvalQ(cl,library(stockassessment))
registerDoParallel(cl)
r<- foreach(idxIter=(1:dims(biol)$iter)) %dopar% {
A <- array(NA,dim=c(dim(stkAssessement@m)[1],dim(stkAssessement@m)[2]))
for(idxAge in 1:dim(stkAssessement@m)[1])
A[idxAge,] <- runmed(stkAssessement@m[dim(stkAssessement@m)[1],,,,,idxIter],k=5)
A
}
# smooth M prior to running the assessment, median filter of order 5
#for(idxIter in 1:nits){
#  print(idxIter)
#  for(idxAge in 1:nAges){
#    stkAssessement@m[idxAge,,,,,idxIter] <- runmed(stkAssessement@m[idxAge,,,,,idxIter],k=5)
#  }
#}
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
r
r[[1]]
cat(paste("\n Time running",round(difftime(Sys.time(),start.time,unit="mins"),0),"minutes \n"))
if("doParallel" %in% (.packages()))
detach("package:doParallel",unload=TRUE)
if("foreach" %in% (.packages()))
detach("package:foreach",unload=TRUE)
if("iterators" %in% (.packages()))
detach("package:iterators",unload=TRUE)
require(doParallel)
ncores <- detectCores()-1
#ncores <- ifelse(iters<ncores,nits,ncores)
cl <- makeCluster(ncores) #set up nodes
